cmake_minimum_required( VERSION 2.8.8 )
project( openIG )

set( OPENIG_VERSION 1.2.0 )
set( OPENIG_MAJOR_VERSION 1 )
set( OPENIG_MINOR_VERSION 2 )
set( OPENIG_SUB_VERSION 0 )

set( CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/CMakeModules;${CMAKE_MODULE_PATH}" )

set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin )
set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib )
if( WIN32 )
    set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY} )
else()
    set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY} )
endif()

IF( WIN32 AND MSVC )
    OPTION( OPENIG_WIN32_USE_MP "Build with multiple processes (/MP option; VS 2005 and above)." ON )
    MARK_AS_ADVANCED( OPENIG_WIN32_USE_MP )
    IF( OPENIG_WIN32_USE_MP )
        SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP" )
    ENDIF( OPENIG_WIN32_USE_MP )
ENDIF( WIN32 AND MSVC )

if(CMAKE_COMPILER_IS_GNUCXX)
    include(GNUInstallDirs)
endif(CMAKE_COMPILER_IS_GNUCXX)

if(NOT DEFINED CMAKE_INSTALL_LIBDIR)
    set(CMAKE_INSTALL_LIBDIR lib)
endif(NOT DEFINED CMAKE_INSTALL_LIBDIR)

if (NOT "$ENV{OPENIG_BUILD}" STREQUAL "")
	SET(CMAKE_INSTALL_PREFIX "$ENV{OPENIG_BUILD}" CACHE PATH "OpeinIG install prefix" FORCE)
endif()

include( FindOSGHelper )
include( FindBoostHelper )
include( FindSilverLiningHelper )
include( FindOsgEarthHelper )
include( FindBulletHelper )
include( FindOSGBullet )

find_package(OpenGL)
find_package(Triton)

INCLUDE_DIRECTORIES(
    ${PROJECT_SOURCE_DIR}
    ${OSG_INCLUDE_DIRS}
    ${PROJECT_SOURCE_DIR}/IgCore
    ${PROJECT_SOURCE_DIR}/IgPluginCore
    ${PROJECT_SOURCE_DIR}/OpenIG
)

ADD_SUBDIRECTORY( IgCore )
ADD_SUBDIRECTORY( IgPluginCore )
ADD_SUBDIRECTORY( OpenIG )

ADD_SUBDIRECTORY( IG )
ADD_SUBDIRECTORY( Demo )

ADD_SUBDIRECTORY( veggen )
ADD_SUBDIRECTORY( vegviewer )

ADD_SUBDIRECTORY( IgPlugin-Animation )
ADD_SUBDIRECTORY( IgPlugin-GPUVegetation )
ADD_SUBDIRECTORY( IgPlugin-Lighting )
ADD_SUBDIRECTORY( IgPlugin-LightPoints )
ADD_SUBDIRECTORY( IgPlugin-ModelComposition )
ADD_SUBDIRECTORY( IgPlugin-RunwayLights )
ADD_SUBDIRECTORY( IgPlugin-RunwayLightsControl )
ADD_SUBDIRECTORY( IgPlugin-SimpleLighting )
ADD_SUBDIRECTORY( IgPlugin-SkyDome )
ADD_SUBDIRECTORY( IgPlugin-TimeOfDayBasedMaterial )
ADD_SUBDIRECTORY( IgPlugin-VDBOffset )
ADD_SUBDIRECTORY( IgPlugin-FBXAnimation )
ADD_SUBDIRECTORY( IgPlugin-OSGParticleEffects )
ADD_SUBDIRECTORY( IgLib-Networking )
ADD_SUBDIRECTORY( IgPlugin-Networking )

IF( SILVERLINING_FOUND )
ADD_SUBDIRECTORY( IgPlugin-SilverLining )
ENDIF( SILVERLINING_FOUND )

IF( TRITON_FOUND )
ADD_SUBDIRECTORY( IgPlugin-Triton )
ENDIF( TRITON_FOUND )


IF( OSGEARTH_FOUND )
INCLUDE_DIRECTORIES(
    ${OSGEARTH_INCLUDE_DIR}
)
ADD_SUBDIRECTORY( IG-Earth )
ADD_SUBDIRECTORY( IgPlugin-OSGEarthSimpleLighting )
ENDIF( OSGEARTH_FOUND )

IF( BULLET_FOUND AND OSGBULLET_FOUND )
ADD_SUBDIRECTORY( IgLib-Bullet )
ADD_SUBDIRECTORY( IgPlugin-Bullet )
ADD_SUBDIRECTORY( IG-Bullet)
ENDIF( BULLET_FOUND AND OSGBULLET_FOUND)

install(EXPORT openig-targets DESTINATION ${CMAKE_INSTALL_LIBDIR})

CONFIGURE_FILE(
  "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules/cmake_uninstall.cmake.in"
  "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
  IMMEDIATE @ONLY)
ADD_CUSTOM_TARGET(uninstall
  "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")

