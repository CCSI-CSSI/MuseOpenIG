cmake_minimum_required( VERSION 2.8.8 )
project( OpenIG )

set( OPENIG_VERSION 2.0.0 )
set( OPENIG_MAJOR_VERSION 2 )
set( OPENIG_MINOR_VERSION 0 )
set( OPENIG_SUB_VERSION 0 )

set( CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/CMakeModules;${CMAKE_MODULE_PATH}" )

set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin )
set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib )
if( WIN32 )
    set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY} )
else()
    set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY} )
endif()

IF( WIN32 AND MSVC )
    OPTION( OPENIG_WIN32_USE_MP "Build with multiple processes (/MP option; VS 2005 and above)." ON )
    MARK_AS_ADVANCED( OPENIG_WIN32_USE_MP )
    IF( OPENIG_WIN32_USE_MP )
        SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP" )
    ENDIF( OPENIG_WIN32_USE_MP )
ENDIF( WIN32 AND MSVC )

if(CMAKE_COMPILER_IS_GNUCXX)
    include(GNUInstallDirs)
endif(CMAKE_COMPILER_IS_GNUCXX)

if(NOT DEFINED CMAKE_INSTALL_LIBDIR)
    set(CMAKE_INSTALL_LIBDIR lib)
endif(NOT DEFINED CMAKE_INSTALL_LIBDIR)

if (NOT "$ENV{OPENIG_BUILD}" STREQUAL "")
	SET(CMAKE_INSTALL_PREFIX "$ENV{OPENIG_BUILD}" CACHE PATH "OpeinIG install prefix" FORCE)
endif()

include( FindOSGHelper )
include( FindBoostHelper )
include( FindSilverLiningHelper )
include( FindOsgEarthHelper )
include( FindBulletHelper )
include( FindOSGBullet )
include( FindCstShare )
include( FindMersive )

find_package(OpenGL)
find_package(Triton)

INCLUDE_DIRECTORIES(
    ${PROJECT_SOURCE_DIR}
    ${OSG_INCLUDE_DIRS}
    ${PROJECT_SOURCE_DIR}/IgCore
    ${PROJECT_SOURCE_DIR}/IgPluginCore
    ${PROJECT_SOURCE_DIR}/OpenIG
)

ADD_SUBDIRECTORY( Core-Base )
ADD_SUBDIRECTORY( Core-PluginBase )
ADD_SUBDIRECTORY( Core-OpenIG )

ADD_SUBDIRECTORY( Application-IG )
ADD_SUBDIRECTORY( Application-A320 )

ADD_SUBDIRECTORY( Utility-veggen )
ADD_SUBDIRECTORY( Utility-vegviewer )
ADD_SUBDIRECTORY( Utility-oigconv )

ADD_SUBDIRECTORY( Plugin-Animation )
ADD_SUBDIRECTORY( Plugin-GPUVegetation )
ADD_SUBDIRECTORY( Plugin-ForwardPlusLighting )
ADD_SUBDIRECTORY( Plugin-ModelComposition )
ADD_SUBDIRECTORY( Plugin-SkyDome )
ADD_SUBDIRECTORY( Plugin-VDBOffset )
ADD_SUBDIRECTORY( Plugin-FBXAnimation )
ADD_SUBDIRECTORY( Plugin-OSGParticleEffects )
ADD_SUBDIRECTORY( Plugin-LightsControl )
ADD_SUBDIRECTORY( Plugin-Networking )
ADD_SUBDIRECTORY( Plugin-SimpleLighting)

ADD_SUBDIRECTORY( Library-Graphics )
ADD_SUBDIRECTORY( Library-Networking )

IF( MERSIVE_FOUND )
 ADD_SUBDIRECTORY( Plugin-Mersive )
ENDIF( MERSIVE_FOUND )

IF( CSTSHARE_FOUND )
    ADD_SUBDIRECTORY( Plugin-Muse )
ENDIF( CSTSHARE_FOUND )

IF( SILVERLINING_FOUND )
	ADD_SUBDIRECTORY( Plugin-SilverLining )
ENDIF( SILVERLINING_FOUND )

IF( TRITON_FOUND )
	ADD_SUBDIRECTORY( Plugin-Triton )
ENDIF( TRITON_FOUND )

IF( OSGEARTH_FOUND )
	INCLUDE_DIRECTORIES(
		${OSGEARTH_INCLUDE_DIR}
	)
	ADD_SUBDIRECTORY( Application-Earth )
	ADD_SUBDIRECTORY( Plugin-OSGEarthSimpleLighting )
ENDIF( OSGEARTH_FOUND )

IF( BULLET_FOUND AND OSGBULLET_FOUND )
	ADD_SUBDIRECTORY( Library-Bullet )
	ADD_SUBDIRECTORY( Plugin-Bullet )
	ADD_SUBDIRECTORY( Application-Bullet)
ENDIF( BULLET_FOUND AND OSGBULLET_FOUND)

FIND_PATH(MYGUI_INCLUDE_DIR MYGUI/MyGUI.h)
FIND_LIBRARY(MYGUI_LIBRARY NAMES MyGUIEngine)
FIND_LIBRARY(MYGUI_OPENGL_LIBRARY NAMES MyGUI.OpenGLPlatform)

IF(MYGUI_INCLUDE_DIR AND MYGUI_LIBRARY)
	ADD_SUBDIRECTORY( Plugin-UI )
ENDIF(MYGUI_INCLUDE_DIR AND MYGUI_LIBRARY)

install(EXPORT openig-targets DESTINATION ${CMAKE_INSTALL_LIBDIR})

CONFIGURE_FILE(
  "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules/cmake_uninstall.cmake.in"
  "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
  IMMEDIATE @ONLY)
if( WIN32 )
  ADD_CUSTOM_TARGET(UNINSTALL
    "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")
else()
  ADD_CUSTOM_TARGET(uninstall
    "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")
endif()

